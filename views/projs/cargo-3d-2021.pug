doctype html
html
  head
    meta(name='theme-color' content='#374c6b')
    meta(name='viewport' content='width=device-width, initial-scale=1')
    meta(charset='UTF-8')
    title= title
    //--link(rel='stylesheet', href='/stylesheets/style.css')
    link(href='https://fonts.googleapis.com/css?family=Montserrat:400,500' rel='stylesheet')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js')
    link(rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css' integrity='sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u' crossorigin='anonymous')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js' integrity='sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa' crossorigin='anonymous')
    script(type='text/javascript' src='../javascripts/snackbarjs/dist/snackbar.min.js')
    link(rel='stylesheet' href='../javascripts/snackbarjs/snackbar.min.css')
    link(rel='stylesheet' href='../javascripts/snackbarjs/themes-css/material-custom.css')
    style.
      textarea{min-height: 50px; max-height: 100px}
      .noresize {resize: none}
      .vresize {resize: vertical}
      .hresize {resize: horizontal}

      table {font-size: 12px}
      ul.nav-tabs > li {cursor: pointer}
      a {outline:none !important;}

      table input {margin-bottom: 5px;}
      /*
      body{
        margin: 0;
        overflow: hidden;
      }
      */
      /*
      body{background-color: #84B4DB; color: white;}
      h1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {color: white;}
      */
      canvas {border-radius: 0px; position: relative;}

      /*.snackbar.snackbar-opened {box-shadow: 2px 2px 10px rgb(0, 0, 0);}*/
      .snackbar{font-family:Montserrat, Tahoma;}
    //-script(type='text/javascript' language='JavaScript1.5' src='../javascripts/cargo-tools/WebGL_Three.js/libs/three.js')
    script(type='text/javascript' language='JavaScript1.5' src='../javascripts/cargo-tools/legacy/three@0.124.0.min.js')
    //-script(type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/three.js/r124/three.min.js')
    script(type='text/javascript' language='JavaScript1.5' src='../javascripts/cargo-tools/legacy/three.interaction@0.2.3.modified.js')
    script(type='text/javascript' src='../javascripts/cargo-tools/WebGL_Three.js/libs/controls/OrbitControls.js')
    script(type='text/javascript' language='JavaScript1.5' src='../javascripts/cargo-tools/retail.js')

    //- PRELOADER v1
    //-link(rel='stylesheet' href='../javascripts/preloader/v1/preloader.css')
    //-script(type='text/javascript' language='JavaScript1.5' src='../javascripts/preloader/v1/preloader.js')
    //-script.
      function showPage() {
        $('.loader').css({ 'display': 'none' });
        $('.container-fluid').css({ 'display': 'block' });
      }
      hideLoader(showPage, 800);
      // div(class="loader") should be in body!
      // body should have style='display:none;'

    //- PRELOADER v2
    link(rel="stylesheet" type="text/css" href="../javascripts/preloader/v2/css-preloader-animations.css")
    link(rel="stylesheet" type="text/css" href="../javascripts/preloader/v2/before-load.css")
    script(type='text/javascript' language='JavaScript1.5' src='../javascripts/preloader/v2/load.js')
    style.
      .brand { position: absolute; top: 20px; right: 20px; }
      @media screen and (min-width: 480px) {
        .brand {
          width: 155px; height:35px; /* original: 311 x 70 */
        }
      }
      @media (max-width: 479px) {
        .brand { width: 104px; height:23px; }
      }      
  body
    div(id="before-load")
      div(class="multi")
        div

    div(class='container-fluid')
      a(href='https://www.scandiccontainer.fi/en/containers/category/new-containers/' target='_blank')
        img(src='./imgs/logo-negative-en-cfa9b28415.png' class='brand')

      h3(class='text-shadow') Three.js test
      //-p
        span Container type&nbsp;
        span(class='containerType badge') #{containerType}
        span(style='display:none;') &nbsp;Cargo type&nbsp;
        span(class='cargoType badge' style='display:none;') #{cargoType}
        span &nbsp;Model [&nbsp;
        code(class='modelName') #{modelName}
        span &nbsp;] Limit units number for this Container&nbsp;
        //-- REMEMBER! Container === Wagon (in main context)
        span(class='factInWagon badge')
        span &nbsp;
          i pcs
      div(class='text-center')
        div(id='WebGL-output')
        //-p Dims of 1 unit&nbsp;
          span(class='badge')
            span(class='cargoLength')
            span &nbsp;x&nbsp;
            span(class='cargoWidth')
            span &nbsp;x&nbsp;
            span(class='cargoHeight')
          span &nbsp;
            i mm
          span &nbsp;Horizontal Orientation in Container&nbsp;
          span(class='badge horizontalOrientation')
          span &nbsp;Add size&nbsp;
          span(class='badge addSize')
          span &nbsp;
            i mm&nbsp;
    script.
      // --- Interaction tools
      const getColor = (name) => {
        switch(name) {
          case 'red': return { isColor: true, r: 1, g: 255 / 115, b: 255 / 115 } // ff7373
          case 'blue': return { isColor: true, r: 0, g: 255 / 123, b: 1 } // 007bff
          case 'green':
          default: return { isColor: true, r: 0, g: 1, b: 0 }
        }
      }
      const handleSetColor = (name) => function(ev) {
        console.log('COLOR')
        ev.data.target.material.color = getColor(name)
      }
      const handleCubeClick = function(ev) {
        $.snackbar({ htmlAllowed: true, content: `<b>${ev.data.target.name}</b><br />${ev.data.target.comment}`, style: 'primary', timeout: 15000 });
        // Call anything...
      }
      // ---

      function utf8_to_b64(str) {
        if (!!window) return window.btoa(unescape(encodeURIComponent(str)));
        return str;
      }
      const getLink = (obj) => {
        return `http://localhost:3002/projects/cargo-3d-2021?wagonLength=13600&wagonWidth=2400&wagonHeight=3000&wagonCarryingCapacity=20000&cargoLength=1100&cargoWidth=1250&cargoHeight=1002&cargoWeight=1800&addSize=50&maxInWagon=13&maxRowsInWagon_byWagonWidth=2&maxRowsInWagon_byWagonLength=50&maxFloorsInWagon=1&cargoType=thermocold_chillers&modelName=test&containerType=truck_v1&productList=${utf8_to_b64(JSON.stringify(obj))}`
      }
      
      const tst = [
        {
          name: "tst 19",
          length: 1000,
          width: 1450,
          height: 1000,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a19"
        },
        {
          name: "tst 20",
          length: 1300,
          width: 1050,
          height: 1100,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a20"
        },
        {
          name: "tst 21",
          length: 1000,
          width: 1490,
          height: 1200,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a21"
        },
        {
          name: "tst 23",
          length: 1100,
          width: 1190,
          height: 1300,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a23"
        },
        {
          name: "tst 24",
          length: 1600,
          width: 1200,
          height: 1090,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a24"
        },
        {
          name: "tst 25",
          length: 1000,
          width: 1000,
          height: 1000,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a25"
        },
        {
          name: "tst 26",
          length: 800,
          width: 800,
          height: 1000,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a26"
        },
        {
          name: "tst 27",
          length: 800,
          width: 800,
          height: 1000,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a27"
        },
        {
          name: "tst 28",
          length: 1800,
          width: 2700,
          height: 1000,
          weight: 1000,
          comment: "comment",
          addSize:200,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a28"
        },
        {
          name: "tst 29",
          length: 2500,
          width: 2700,
          height: 1000,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a29"
        },
        {
          name: "tst 30",
          length: 2500,
          width: 2700,
          height: 1000,
          weight: 1000,
          comment: "comment",
          addSize:50,
          id: "bc5886a9-2726-442f-a7a5-4b5ace0d6a30"
        }
      ]
      
      console.log(getLink(tst))
      // http://localhost:3002/projects/cargo-3d-2021?wagonLength=13600&wagonWidth=2400&wagonHeight=3000&wagonCarryingCapacity=20000&cargoLength=1100&cargoWidth=1250&cargoHeight=1002&cargoWeight=1800&addSize=50&maxInWagon=13&maxRowsInWagon_byWagonWidth=2&maxRowsInWagon_byWagonLength=50&maxFloorsInWagon=1&cargoType=thermocold_chillers&modelName=test&containerType=truck_v1&productList=W3sibmFtZSI6InRzdCAxIiwibGVuZ3RoIjoxMDAwLCJ3aWR0aCI6MTQ1MCwiaGVpZ2h0IjoxMDAwLCJ3ZWlnaHQiOjEwMDAsImNvbW1lbnQiOiJjb21tZW50IiwiYWRkU2l6ZSI6NTAsImlkIjoiYmM1ODg2YTktMjcyNi00NDJmLWE3YTUtNGI1YWNlMGQ2YTE5In0seyJuYW1lIjoidHN0IDEiLCJsZW5ndGgiOjEzMDAsIndpZHRoIjoxMDUwLCJoZWlnaHQiOjExMDAsIndlaWdodCI6MTAwMCwiY29tbWVudCI6ImNvbW1lbnQiLCJhZGRTaXplIjo1MCwiaWQiOiJiYzU4ODZhOS0yNzI2LTQ0MmYtYTdhNS00YjVhY2UwZDZhMjAifSx7Im5hbWUiOiJ0c3QgMSIsImxlbmd0aCI6MTAwMCwid2lkdGgiOjE0OTAsImhlaWdodCI6MTIwMCwid2VpZ2h0IjoxMDAwLCJjb21tZW50IjoiY29tbWVudCIsImFkZFNpemUiOjUwLCJpZCI6ImJjNTg4NmE5LTI3MjYtNDQyZi1hN2E1LTRiNWFjZTBkNmEyMSJ9LHsibmFtZSI6InRzdCAxIiwibGVuZ3RoIjoxMTAwLCJ3aWR0aCI6MTE5MCwiaGVpZ2h0IjoxMzAwLCJ3ZWlnaHQiOjEwMDAsImNvbW1lbnQiOiJjb21tZW50IiwiYWRkU2l6ZSI6NTAsImlkIjoiYmM1ODg2YTktMjcyNi00NDJmLWE3YTUtNGI1YWNlMGQ2YTIzIn0seyJuYW1lIjoidHN0IDEiLCJsZW5ndGgiOjE2MDAsIndpZHRoIjoxMjAwLCJoZWlnaHQiOjEwOTAsIndlaWdodCI6MTAwMCwiY29tbWVudCI6ImNvbW1lbnQiLCJhZGRTaXplIjo1MCwiaWQiOiJiYzU4ODZhOS0yNzI2LTQ0MmYtYTdhNS00YjVhY2UwZDZhMjQifSx7Im5hbWUiOiJ0c3QgMSIsImxlbmd0aCI6MTAwMCwid2lkdGgiOjEwMDAsImhlaWdodCI6MTAwMCwid2VpZ2h0IjoxMDAwLCJjb21tZW50IjoiY29tbWVudCIsImFkZFNpemUiOjUwLCJpZCI6ImJjNTg4NmE5LTI3MjYtNDQyZi1hN2E1LTRiNWFjZTBkNmEyNSJ9LHsibmFtZSI6InRzdCAxIiwibGVuZ3RoIjo4MDAsIndpZHRoIjo4MDAsImhlaWdodCI6MTAwMCwid2VpZ2h0IjoxMDAwLCJjb21tZW50IjoiY29tbWVudCIsImFkZFNpemUiOjUwLCJpZCI6ImJjNTg4NmE5LTI3MjYtNDQyZi1hN2E1LTRiNWFjZTBkNmEyNiJ9LHsibmFtZSI6InRzdCAxIiwibGVuZ3RoIjo4MDAsIndpZHRoIjo4MDAsImhlaWdodCI6MTAwMCwid2VpZ2h0IjoxMDAwLCJjb21tZW50IjoiY29tbWVudCIsImFkZFNpemUiOjUwLCJpZCI6ImJjNTg4NmE5LTI3MjYtNDQyZi1hN2E1LTRiNWFjZTBkNmEyNyJ9XQ==
      
      function b64_to_utf8(str) {
        return decodeURIComponent(escape(window.atob(str)));
      }
      function utf8_to_b64(str) {
        return window.btoa(unescape(encodeURIComponent(str)));
      }
      const getProductListJSONFromProp = () => {
        try {
          console.log(b64_to_utf8("#{productList}"))
          const json = JSON.parse(b64_to_utf8("#{productList}"))
          return json;
        } catch (err) {
          throw new Error(err)
        }
      };
      
      $(function(){
        //console.log(THREE);
        try{
          // Convert to meters
          var wagonLength = #{wagonLength},
              productList = getProductListJSONFromProp(),
              wagonWidth = #{wagonWidth},
              wagonHeight = #{wagonHeight},
              cargoLength = {},
              cargoWidth = {},
              cargoHeight = {},
              cargoWeight = {},
              cargoAddSize = {}, // #{addSize};
              maxInWagon = #{maxInWagon},
              maxRowsInWagon_byWagonWidth = #{maxRowsInWagon_byWagonWidth},
              maxRowsInWagon_byWagonLength = #{maxRowsInWagon_byWagonLength},
              maxFloorsInWagon = #{maxFloorsInWagon},
              wagonCarryingCapacity = #{wagonCarryingCapacity};
          const products = productList.map((product) => {
            const {
              id,
              length,
              width,
              height,
              weight,
              addSize,
            } = product;
            const cargoConfig = retail.inWagon({
              length,
              width,
              height,
              weight,
              addSize,
              maxInWagon,
              maxRowsInWagon_byWagonWidth,
              maxRowsInWagon_byWagonLength,
              maxFloorsInWagon,
              wagon: {
                maxLength: #{wagonLength},
                maxWidth: #{wagonWidth},
                maxHeight: #{wagonHeight},
                maxWeight: wagonCarryingCapacity
              }
            });
            // console.log(cargoConfig)
            cargoLength[id] = length
            cargoWidth[id] = width
            cargoHeight[id] = height
            cargoAddSize[id] = addSize
            
            return ({
              ...product,
              cargoConfig,
              horizontalOrientation: cargoConfig.horizontalOrientation,
            })
          })

          // console.clear();
          // console.log(getLink(tst))
          
          products.forEach(({
            id,
            width,
            length,
            horizontalOrientation,
            cargoConfig,
          }) => {
            let cargoType = $('.cargoType').val(),
              modelName = $('.modelName').val(),
              config = cargoConfig.config;
            let _l_tpm = cargoLength[id];
            switch(horizontalOrientation){
              case "byLength":
                cargoLength[id] = _l_tpm;
                cargoWidth[id] = width;
                break;
              case "byWidth":
                cargoLength[id] = width;
                cargoWidth[id] = _l_tpm;
                break;
              default:;
            }
          })
          
          //console.log(cargoLength);
          //$(".cargoType").html(cargoType);
          //$(".modelName").html(modelName);
          // $(".cargoLength").html(cargoLength);
          // $(".cargoWidth").html(cargoWidth);
          // $(".cargoHeight").html(cargoHeight);
          // $(".horizontalOrientation").html(horizontalOrientation);
          // $(".addSize").html(addSize);

          var sizeW, sizeH;
          //console.log(window.innerWidth);
          // sizeW = window.innerWidth - 15*2;
          sizeW = window.innerWidth;
          sizeH = window.innerHeight - 200;

          var offsetX = wagonLength*0.001/2.1;
          var offsetY = wagonWidth*0.001/4;
          var offsetZ_cargoOnly = 0.005; // m
          // if (sizeW < 992) { offsetX=0; offsetY=0 } // should be refactored

          let degToRad = (deg) => deg * Math.PI / 180;

          let scene = new THREE.Scene(),
            camera = new THREE.PerspectiveCamera(35, sizeW/sizeH, 0.1, 1000),
            // See also: https://threejs.org/docs/#api/en/cameras/PerspectiveCamera
            renderer = new THREE.WebGLRenderer({ antialias: false });
          //renderer.setClearColorHex(0xEEEEEE);
          renderer.setClearColor(0xEEEEEE);
          renderer.setSize(sizeW, sizeH);

          //let axes = new THREE.AxisHelper(10);
          //scene.add(axes);
          var planeGeometry = new THREE.PlaneGeometry(wagonLength*0.001, wagonWidth*0.001);
          var planeMaterial = new THREE.MeshBasicMaterial({color: 0xd0d0d0}); // материал для рисования (плоским или каркасным способом), по умолчанию плоский, wireframe:true - каркасный
          var plane = new THREE.Mesh(planeGeometry, planeMaterial);
          plane.rotation.x = 0;
          plane.rotation.y = 0;
          plane.rotation.z = 0;
          plane.position.x = wagonLength*0.001/2 - offsetX;
          plane.position.y = wagonWidth*0.001/2 + offsetY;
          plane.position.z = 0;
          scene.add(plane);
          var planeGeometry2 = new THREE.PlaneGeometry(wagonHeight*0.001, wagonWidth*0.001);
          var planeMaterial2 = new THREE.MeshBasicMaterial({color: 0xdddddd});
          var plane2 = new THREE.Mesh(planeGeometry2, planeMaterial2);
          plane2.rotation.x = 0;
          plane2.rotation.y = degToRad(90);
          plane2.rotation.z = 0;
          plane2.position.x = 0 - offsetX;
          plane2.position.y = wagonWidth*0.001/2 + offsetY;
          plane2.position.z = wagonHeight*0.001/2;
          scene.add(plane2);
          var planeGeometry3 = new THREE.PlaneGeometry(wagonLength*0.001, wagonHeight*0.001);
          var planeMaterial3 = new THREE.MeshBasicMaterial({color: 0xdddddd});
          var plane3 = new THREE.Mesh(planeGeometry3, planeMaterial3);
          plane3.rotation.x = degToRad(-90);
          plane3.rotation.y = 0;
          plane3.rotation.z = 0;
          plane3.position.x = wagonLength*0.001/2 - offsetX;
          plane3.position.y = 0 + offsetY;
          plane3.position.z = wagonHeight*0.001/2;
          scene.add(plane3);

          var getCubeGeometry = (cargoLength, cargoWidth, cargoHeight) => new THREE.CubeGeometry(cargoLength*0.001, cargoWidth*0.001, cargoHeight*0.001);
          //console.log(cargoLength*0.001, cargoWidth*0.001, cargoHeight*0.001);
          //var cubeMaterial = new THREE.MeshBasicMaterial({color: 0xff0000, wireframe: true});//337ab7

          var _pcs = 0;// количество отображаемых кубиков

          const _fact_inWagon = {
            result: products.reduce((acc, { cargoConfig }) => acc + cargoConfig.result, 0),
            comment: 'In progress',
            sizes: {
              comment: 'In progress',
            },
          }
          console.log(_fact_inWagon.result)
          
          if(_fact_inWagon.result===0 || _fact_inWagon.result===undefined){
            //throw new Error(_fact_inWagon.comment);
            $.snackbar({content: `ATTANTION! ${_fact_inWagon.comment}`, style: "danger-slate", timeout: 60000});
          }
          //console.log(_fact_inWagon);
          console.log(_fact_inWagon.comment);
          console.log(_fact_inWagon.sizes.comment);
          // $(".factInWagon").html(_fact_inWagon.result);
          
          const light = new THREE.PointLight(0xffffff, 3)
          light.position.set(5, 5, 5)
          const light2 = new THREE.PointLight(0xffffff, 1)
          light2.position.set(-5, -5, -5)
          scene.add(light)
          scene.add(light2)
          
          const interaction = new Interaction(renderer, scene, camera);
          
          // v4.
          let mayBeOffsetY = 0
          let mayBeDowngradeOffsetX = 0
          let isCorrectCube = false
          let totalX = 0
          products.forEach(({ cargoConfig, id, name, comment }, pi) => {
            const { config } = cargoConfig
            for (let j = 0; j < 1; j++){ // For each by X
              let x = j * cargoLength[id]*0.001 + cargoLength[id]*0.001/2 + cargoAddSize[id]*0.001;
              for (let k = 0; k < 1; k++){ // For each by Z
                let z = k * cargoHeight[id]*0.001 + cargoHeight[id]*0.001/2;
                for (let i = 0; i < 1; i++) { // For each by YS

                  let y = i*cargoWidth[id]*0.001 + cargoWidth[id]*0.001/2 + (i+1)*cargoAddSize[id]*0.001,
                    cubeMaterial;
                  let defaultColor
                  if (
                    _pcs >= _fact_inWagon.result
                    || wagonWidth < (cargoWidth[id] + cargoAddSize[id])
                  ) {
                    defaultColor = 0xff7373
                    cubeMaterial = new THREE.MeshBasicMaterial({ color: defaultColor, wireframe: true })
                    isCorrectCube = false;
                  } else {
                    defaultColor = 0x007bff
                    cubeMaterial = new THREE.MeshBasicMaterial({ color: defaultColor, wireframe: true });
                    _pcs += 1;
                    isCorrectCube = true;
                  }
                  
                  var cube = new THREE.Mesh(getCubeGeometry(cargoLength[id], cargoWidth[id], cargoHeight[id]), cubeMaterial);
                  if (
                    (mayBeOffsetY > 0 && ((wagonWidth*0.001 - mayBeOffsetY) > cargoWidth[id]*0.001))
                    && ((mayBeDowngradeOffsetX - cargoLength[id]*0.001) > 0)
                  ) {
                    cube.position.x = x - offsetX - mayBeDowngradeOffsetX;
                    cube.position.y = y + offsetY + mayBeOffsetY;
                    mayBeOffsetY = 0
                  } else {
                    cube.position.x = x - offsetX;
                    cube.position.y = y + offsetY;
                    mayBeOffsetY = cargoWidth[id]*0.001 + cargoAddSize[id]*0.001
                    mayBeDowngradeOffsetX = cargoLength[id]*0.001 + cargoAddSize[id]*0.001
                    
                    if (isCorrectCube) {
                      totalX += cargoLength[id]*0.001 + cargoAddSize[id]*0.001
                    }
                  }
                  
                  cube.position.z = z + offsetZ_cargoOnly;
                  cube.name = name;
                  cube.comment = comment;
                  cube.cursor = 'pointer';
                  cube.on('click', handleCubeClick);
                  
                  scene.add(cube);
                }
              }
            }

            if (mayBeOffsetY !== 0) {
              offsetX -= cargoLength[id]*0.001 + cargoAddSize[id]*0.001
            }
            mayBeDowngradeOffsetX = cargoLength[id]*0.001 + cargoAddSize[id]*0.001
          })

          // --- NOTE: Init Camera Position
          function setPosition() {
            // if (sizeW > 992) { // 30 90 80 // 20 100 60
              camera.position.x = 5;
              camera.position.y = 10;
              camera.position.z = 5;
            /* } else { // 45 70 50 - подойдет когда центр координат совмещен с центром дисплея
              camera.position.x = 20;
              camera.position.y = 5;
              camera.position.z = 3;
            } */
          }
          setPosition()
          
          // ---
          // --- NOTE: Resize listener
          const handleWindowResize = () => {
            camera.aspect = window.innerWidth / window.innerHeight
            camera.updateProjectionMatrix()
            renderer.setSize(window.innerWidth, window.innerHeight)
            renderer.render(scene, camera)
          }
          window.addEventListener('resize', handleWindowResize, false)
          // ---

          camera.rotateOnAxis(new THREE.Vector3(1, 0, 0), degToRad(90));
          camera.up = new THREE.Vector3(0, 0, 1);
          camera.lookAt(scene.position);

          $("#WebGL-output").append(renderer.domElement);
          
          // See also: https://threejs.org/docs/#examples/en/controls/OrbitControls
          // NOTE: controls.update() must be called after any manual changes to the camera's transform
          const controls = new THREE.OrbitControls(camera, renderer.domElement)
          // controls.enableDamping = true
          // controls.dampingFactor = 0.1
          renderer.render(scene, camera);

          // test
          //...

          // Reconstruct by resizing
          function onWindowResize(){
            var sizeW, sizeH;
            // sizeW = window.innerWidth - 15*4;
            sizeW = window.innerWidth;
            sizeH = window.innerHeight - 160;
            camera.aspect = sizeW / sizeH;
            camera.updateProjectionMatrix();
            controls.update();
            renderer.setSize(sizeW, sizeH);
            render();
          };
          
          // ---
          function animate() {
            requestAnimationFrame(animate)
            
            // cube.rotation.x += 0.01;
            // cube.rotation.y += 0.01;

            controls.update()

          	renderer.render(scene, camera)
          }
          animate()
          // ---

          function render(){
            renderer.render(scene, camera);
          }
          window.addEventListener('resize', onWindowResize, false);

          const delay = (ms=100) => new Promise((res, rej) => { setTimeout(()=>res(), ms); });
          delay()
            .then(()=>{
              $.snackbar({content: `ATTANTION! Total weight wasn't checked!`, style: `primary`, timeout: 5000});
            });
          //  delay(2000).then(()=>{
          //    $.snackbar({content: `Total Dims for all units [ in Blue only ] is ${_fact_inWagon.sizes.fullX} x ${_fact_inWagon.sizes.fullY} x ${_fact_inWagon.sizes.fullZ} mm`, style: `default`, timeout: 73000});
          //  });
          delay(2000)
            .then(() => {
              $.snackbar({ content: `Correct x: ${totalX.toFixed(2)} m`, style: `default`, timeout: 73000 })
            });
          delay(15000)
            .then(()=>{
              $.snackbar({content: `Container sizes is ${wagonLength*0.001} x ${wagonWidth*0.001} x ${wagonHeight*0.001} m. More in console`, style: `default`, timeout: 55000});
            });
        }catch(er){
          // console.log(er);
          $.snackbar({content: `Sorry, ${er.message}`, style: `danger-slate`, timeout: 60000});
        }
      });
